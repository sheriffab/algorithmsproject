

#include <iostream>
#include <cstdlib> 
#include <ctime> 
#include <chrono> 
using namespace std::chrono;
using namespace std;

void exchange(int* a, int* b);
int partition(int A[], int p, int r);
int randompartition(int A[], int p, int r);
void quicksort(int A[], int p, int r);
void randomizedquicksort(int A[], int p, int r);


int main()
{
    srand((unsigned)time(0));
    
   /* int* d = new int[10];
    for (int i = 0; i < 10; i++) {
        d[i] = (rand() % 100) + 1;
       // cout << d[i] << endl;
    }*/
    int* c=new int[10];
     for (int i = 0; i <=9; i++) {
         c[i] = 10-i;
       }
     
     auto start = high_resolution_clock::now();
   quicksort(c, 0, 9);
  //randomizedquicksort(c, 0, 9);
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
   

        cout << duration.count() << " microseconds" << endl;
    //delete[] d;
    delete[] c;
    return 0;
}
void exchange(int* a, int* b) {
    int t = *a;
    *a = *b;
    *b = t;
}

int partition(int A[], int p, int r) {
    int x = A[p];
    int i = r + 1;
    for (int j = r; j >= p + 1; j--) {
        if (A[j] >= x) {
            i = i - 1;
            exchange(&A[i], &A[j]);
        }
    }
    exchange(&A[i - 1], &A[p]);
    return i - 1;
}
int randompartition(int A[], int p, int r) {
 
    int random =p + rand() % (r - p);
    exchange(&A[random], &A[r]);

    return partition(A, p, r);

}
void quicksort(int A[], int p, int r) {
    if (p < r) {
        int q = partition(A, p, r);
        quicksort(A, p, q - 1);
        quicksort(A, q + 1, r);
    }
}
void randomizedquicksort(int A[], int p, int r) {
    if (p < r) {
        int q = randompartition(A, p, r);
        quicksort(A, p, q - 1);
        quicksort(A, q + 1, r);
    }
}

